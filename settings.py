"""
Django settings for ca_final_accounts project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from configparser import SafeConfigParser
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

from corsheaders.defaults import default_headers

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

config = SafeConfigParser(interpolation=None)
config.read(f"{BASE_DIR}/config.ini")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get("DEFAULT", "SECRET_KEY")
JWT_SECRET_KEY = config.get("DEFAULT", "JWT_SECRET_KEY")
TOKEN_EXPIRY_IN_MINUTES = config.getint("DEFAULT", "TOKEN_EXPIRY_IN_MINUTES")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean("DEFAULT", "DJANGO_DEBUG")

ALLOWED_HOSTS = config.get("DEFAULT", "DJANGO_ALLOWED_HOSTS").split(",")
BPC = config.get("DEFAULT", "BPC")
APPLICATION_BASE_URL = config.get("DEFAULT", "APPLICATION_BASE_URL")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd party
    "corsheaders",
    "rest_framework",
    # 'rest_framework.authtoken',
    "rest_framework_simplejwt.token_blacklist",
    # product
    "config.apps.ConfigConfig",
    "question.apps.QuestionConfig",
    "answer.apps.AnswerConfig",
    "account.apps.AccountConfig",
    "shop.apps.ShopConfig",
    "ipcc.apps.IpccConfig",
    "utils",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "django_cprofile_middleware.middleware.ProfilerMiddleware",
]

# DJANGO_CPROFILE_MIDDLEWARE_REQUIRE_STAFF = False

ROOT_URLCONF = "ca_final_accounts.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [PROJECT_ROOT + "/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ca_final_accounts.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config.get("DATABASE", "DB_ENGINE"),
        "NAME": config.get("DATABASE", "DB_NAME"),
        "USER": config.get("DATABASE", "DB_USERNAME"),
        "PASSWORD": config.get("DATABASE", "DB_PASSWORD"),
        "HOST": config.get("DATABASE", "DB_HOST"),
        "PORT": config.get("DATABASE", "DB_PORT"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

# CREATE DATABASE ca_final_accounts CHARACTER SET utf8mb4 COLLATE
# utf8mb4_unicode_ci;
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings
# /#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": ("django.contrib.auth.password_validation."
                 "MinimumLengthValidator"),
        "OPTIONS": {
            "min_length": 9,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation."
                "NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = PROJECT_ROOT + "/static_root/"

STATIC_URL = "/static/"

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or
    # "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    f"{PROJECT_ROOT}/static/",
)

MEDIA_URL = "/media/"
MEDIA_ROOT = PROJECT_ROOT + "/media"

LOGIN_REDIRECT_URL = "/my-app/"
LOGIN_URL = "/login/"

EMAIL_HOST = config.get("EMAIL", "EMAIL_HOST")
EMAIL_HOST_USER = config.get("EMAIL", "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config.get("EMAIL", "EMAIL_HOST_PASSWORD")
EMAIL_PORT = config.getint("EMAIL", "EMAIL_PORT")
EMAIL_USE_TLS = config.getboolean("EMAIL", "EMAIL_USE_TLS")
DEFAULT_FROM_EMAIL = config.get("EMAIL", "DEFAULT_FROM_EMAIL")
EMAIL_BACKEND = config.get("EMAIL", "EMAIL_BACKEND")
ELASTICEMAIL_API_KEY = config.get("EMAIL", "ELASTICEMAIL_API_KEY")

# https://medium.com/nerd-for-tech/how-to-send-e-mail-in-django-20d6f6558f01
# SERVER_EMAIL = 'smseach.errors@gmail.com'

# logging, handlers, filters and formatters
# LOGGING = {
#     'version': 1,
#     'loggers': {
#         'django': {
#             'handlers': ['file', 'file2'],
#             'level': "DEBUG"
#         }
#     },
#     'handlers': {
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': './var/log/debug1.log',
#             'formatter': 'simple'
#         },
#         'file2': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': './var/log/debug2.log',
#             'formatter': 'simple',
#         }
#     },
#     'formatters': {
#         'simple': {
#             'format': '{levelname} {asctime} {module} {process:d} {'
#                       'thread:d} {message}',
#             'style': '{'
#         }
#     }
# }

handler400 = "rest_framework.exceptions.bad_request"

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = list(default_headers) + ["Request-Id"]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ]
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=25),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("JWT",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "app_cache",
    }
}

# PAYMENT_GATEWAY
PG_NAME = config.get("PAYMENT_GATEWAY", "NAME")
PG_APP_ID = config.get("PAYMENT_GATEWAY", "APP_ID")
PG_SECRET_KEY = config.get("PAYMENT_GATEWAY", "SECRET_KEY")
PG_ENV = config.get("PAYMENT_GATEWAY", "ENVIRONMENT")
PG_BASE_URL = config.get("PAYMENT_GATEWAY", "BASE_URL")
PG_RETURN_URL = config.get("PAYMENT_GATEWAY", "RETURN_URL")
PG_NOTIFY_URL = config.get("PAYMENT_GATEWAY", "NOTIFY_URL")

# https://docs.djangoproject.com/en/4.0/ref/settings/#data-upload-max-number-fields
DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

# logging
# settings.py

# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': f"{BASE_DIR}/debug.log",
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
}


# settings.py

LOGGING1 = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}
